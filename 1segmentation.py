# -*- coding: utf-8 -*-
"""1segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/173WTrD9N9_K2RwG8Kv8N3VAqCKO-47R6
"""

!nvidia-smi

!pip install ultralytics

from google.colab import drive
drive.mount('/content/drive')

from ultralytics import YOLO
import os
from IPython.display import display, Image
from IPython import display
display.clear_output()
!yolo mode=checks

!pip install ultralytics==8.0.196
!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="jOLvr3LfXQi60MOQrKPD")
project = rf.workspace("ghilles").project("extended-defects-detection")
version = project.version(8)
dataset = version.download("yolov8")

!yolo task=segment mode=train model=yolov8m-seg.pt data=/content/drive/MyDrive/Extendeddefectsdetection/data.yaml epochs=250 imgsz=640

from ultralytics import YOLO
import cv2
from google.colab.patches import cv2_imshow
#from google.colab import drive
#drive.mount('/content/drive')
model = YOLO('/content/sample_data/best1.pt')
results = model(source='/content/sample_data/denoised-889-9k.jpg', show=True,show_labels=False,conf=0.04,iou=0.6, save=True)

import torch
from ultralytics import YOLO

# Load model
model = YOLO('/content/sample_data/best1.pt')

# Custom class names and colors
custom_labels = {
    0: "BD",  # Dark Defect (EDD)
    1: "DD",  # Bright Defect (EBD)
}

custom_colors = {
    0: (0, 0, 239),  # Dark Defect (Dark Red)
    1: (30, 144, 255),  # Bright Defect (Bright Blue)
}

# Run inference
results = model(source='/content/sample_data/ZrTe3 - Hf Doped-Newtip-Newcleave9k_0889.jpg',show_labels=False, conf=0.05, save=False)

# Modify labels before displaying results
for result in results:
    for box in result.boxes:
        cls = int(box.cls[0])  # Get class index
        if cls in custom_labels:
            result.names[cls] = custom_labels[cls]  # Change label text
            box.color = custom_colors[cls]  # Change label color

    result.show()  # Show modified results

from ultralytics import YOLO

# Load the best model
model = YOLO('/content/sample_data/best.pt')

# Print model info
print("Model Architecture:", model.model)
print("Number of Parameters:", sum(p.numel() for p in model.model.parameters()))
print("Class Names:", model.names)
import torch

# Load model state dictionary
model_weights = torch.load("/content/sample_data/best.pt", map_location="cpu")

# Extract hyperparameters
hyp = model_weights["model"].args if "model" in model_weights else {}

print("Model Hyperparameters:", hyp)